{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport { makePropTypesFactory, makeValidatingTransformFactory } from \"./factory\";\nexport const makePropTypes = makePropTypesFactory(vars => ({\n  badge: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  badgeColor: PropTypes.oneOf(vars.colors),\n  badgeOutlined: PropTypes.bool,\n  badgeRounded: PropTypes.bool,\n  badgeSize: PropTypes.oneOf(vars.badgeSizes)\n}));\nexport const transform = props => {\n  const badge = props.badge,\n        badgeColor = props.badgeColor,\n        badgeOutlined = props.badgeOutlined,\n        badgeRounded = props.badgeRounded,\n        badgeSize = props.badgeSize,\n        className = props.className,\n        rest = tslib_1.__rest(props, [\"badge\", \"badgeColor\", \"badgeOutlined\", \"badgeRounded\", \"badgeSize\", \"className\"]);\n\n  return Object.assign({\n    className: classNames({\n      badge,\n      [\"has-badge-\".concat(badgeColor)]: badgeColor,\n      \"has-badge-outlined\": badgeOutlined,\n      \"has-badge-rounded\": badgeRounded,\n      [\"has-badge-\".concat(badgeSize)]: badgeSize\n    }, className)\n  }, badge !== undefined ? {\n    \"data-badge\": badge\n  } : {}, rest);\n};\nexport const makeValidatingTransform = makeValidatingTransformFactory(makePropTypes, transform);","map":null,"metadata":{},"sourceType":"module"}