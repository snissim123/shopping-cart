{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport { makePropTypesFactory, makeValidatingTransformFactory } from \"./factory\";\nexport const makePropTypes = makePropTypesFactory(vars => ({\n  backgroundColor: PropTypes.oneOf([...vars.colors, ...vars.shades]),\n  italic: PropTypes.bool,\n  textAlign: PropTypes.oneOf(vars.textAlignments),\n  textColor: PropTypes.oneOf([...vars.colors, ...vars.shades]),\n  textSize: PropTypes.oneOf(vars.textSizes),\n  textTransform: PropTypes.oneOf(vars.textTransforms),\n  textWeight: PropTypes.oneOf(vars.textWeights)\n}));\nexport const transform = props => {\n  const backgroundColor = props.backgroundColor,\n        className = props.className,\n        italic = props.italic,\n        textAlign = props.textAlign,\n        textColor = props.textColor,\n        textSize = props.textSize,\n        textTransform = props.textTransform,\n        textWeight = props.textWeight,\n        rest = tslib_1.__rest(props, [\"backgroundColor\", \"className\", \"italic\", \"textAlign\", \"textColor\", \"textSize\", \"textTransform\", \"textWeight\"]);\n\n  return Object.assign({\n    className: classNames({\n      [\"has-background-\".concat(backgroundColor)]: backgroundColor,\n      [\"has-text-\".concat(textColor)]: textColor,\n      \"is-italic\": italic,\n      [\"is-\".concat(textTransform)]: textTransform,\n      [\"has-text-\".concat(textAlign)]: textAlign,\n      [\"has-text-weight-\".concat(textWeight)]: textWeight,\n      [\"is-size-\".concat(textSize)]: textSize\n    }, className)\n  }, rest);\n};\nexport const makeValidatingTransform = makeValidatingTransformFactory(makePropTypes, transform);","map":null,"metadata":{},"sourceType":"module"}