{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport React from \"react\";\nimport { Generic } from \"../../base\";\nimport { canUseDOM } from \"../../utils\";\nimport { NavbarContext } from \"./navbar-context\";\nexport const NAVBAR_DEFAULTS = {\n  fixedAlignments: [\"top\", \"bottom\"]\n};\nexport class NavbarContainer extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      active: props.active === true\n    };\n  }\n\n  componentWillUnmount() {\n    const fixed = this.props.fixed;\n    const html = this.document.querySelector(\"html\");\n\n    if (html !== null) {\n      html.classList.remove(\"has-navbar-fixed-\".concat(fixed));\n    }\n  }\n\n  render() {\n    this.manageHtmlAttributes();\n\n    const _a = this.props,\n          active = _a.active,\n          className = _a.className,\n          color = _a.color,\n          fixed = _a.fixed,\n          innerRef = _a.innerRef,\n          managed = _a.managed,\n          transparent = _a.transparent,\n          rest = tslib_1.__rest(_a, [\"active\", \"className\", \"color\", \"fixed\", \"innerRef\", \"managed\", \"transparent\"]);\n\n    return React.createElement(NavbarContext.Provider, {\n      value: {\n        active: this.active,\n        setActive: value => {\n          this.active = value;\n        }\n      }\n    }, React.createElement(Generic, Object.assign({\n      className: classNames(\"navbar\", {\n        \"is-transparent\": transparent,\n        [\"is-fixed-\".concat(fixed)]: fixed,\n        [\"is-\".concat(color)]: color\n      }, className),\n      ref: innerRef,\n      role: \"navigation\"\n    }, rest)));\n  }\n\n  get active() {\n    return this.props.managed === true ? this.props.active === true : this.state.active;\n  }\n\n  set active(value) {\n    if (this.props.managed !== true) {\n      this.setState({\n        active: value\n      });\n    }\n  }\n\n  get document() {\n    return this.props.document !== undefined ? this.props.document : document;\n  }\n\n  manageHtmlAttributes() {\n    if (canUseDOM()) {\n      const html = this.document.querySelector(\"html\");\n\n      if (html !== null) {\n        html.classList.remove(\"has-navbar-fixed-top\");\n        html.classList.remove(\"has-navbar-fixed-bottom\");\n\n        if (this.props.fixed !== undefined) {\n          html.classList.add(\"has-navbar-fixed-\".concat(this.props.fixed));\n        }\n      }\n    }\n  }\n\n}\nNavbarContainer.defaultProps = {\n  transparent: false\n};\nNavbarContainer.displayName = \"Navbar.Container\";","map":null,"metadata":{},"sourceType":"module"}