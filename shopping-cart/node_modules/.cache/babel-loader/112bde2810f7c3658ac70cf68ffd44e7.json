{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport React from \"react\";\nimport { Generic } from \"../../base\";\nimport { combineRefs } from \"../../utils\";\nimport { NavbarItemContext } from \"./navbar-item-context\";\nexport class NavbarItemContainer extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.ref = React.createRef();\n\n    this.handleDocumentClick = event => {\n      if (this.props.managed !== true && this.active && this.ref.current !== null) {\n        if (event.target instanceof Element && !this.ref.current.contains(event.target)) {\n          this.active = false;\n        }\n      }\n    };\n\n    this.handleOnClick = ctx => event => {\n      if (this.props.onClick !== undefined) {\n        this.props.onClick(event);\n      }\n\n      ctx.setActive(!ctx.active);\n    };\n\n    this.state = {\n      active: props.active === true\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.dropdown === true) {\n      document.addEventListener(\"click\", this.handleDocumentClick);\n    }\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"click\", this.handleDocumentClick);\n  }\n\n  render() {\n    const _a = this.props,\n          as = _a.as,\n          active = _a.active,\n          initialClassName = _a.className,\n          dropdown = _a.dropdown,\n          expanded = _a.expanded,\n          hoverable = _a.hoverable,\n          innerRef = _a.innerRef,\n          managed = _a.managed,\n          onClick = _a.onClick,\n          tab = _a.tab,\n          up = _a.up,\n          rest = tslib_1.__rest(_a, [\"as\", \"active\", \"className\", \"dropdown\", \"expanded\", \"hoverable\", \"innerRef\", \"managed\", \"onClick\", \"tab\", \"up\"]);\n\n    const className = classNames(\"navbar-item\", {\n      \"has-dropdown\": dropdown,\n      \"has-dropdown-up\": up,\n      \"is-active\": this.active,\n      \"is-expanded\": expanded,\n      \"is-hoverable\": hoverable,\n      \"is-tab\": tab\n    }, initialClassName);\n    const ref = combineRefs(this.ref, innerRef);\n\n    if (dropdown === true) {\n      const asOverride = as === \"a\" ? \"div\" : as;\n      return React.createElement(NavbarItemContext.Provider, {\n        value: {\n          active: this.active,\n          setActive: value => this.active = value\n        }\n      }, React.createElement(Generic, Object.assign({\n        as: asOverride,\n        className: className,\n        ref: ref\n      }, rest)));\n    }\n\n    return React.createElement(NavbarItemContext.Consumer, null, ctx => React.createElement(Generic, Object.assign({\n      as: as,\n      className: className,\n      onClick: this.handleOnClick(ctx),\n      ref: ref\n    }, rest)));\n  }\n\n  get active() {\n    return this.props.managed === true ? this.props.active === true : this.state.active;\n  }\n\n  set active(value) {\n    if (this.props.managed !== true) {\n      this.setState({\n        active: value\n      });\n    }\n  }\n\n}\nNavbarItemContainer.displayName = \"Navbar.Item.Container\";","map":null,"metadata":{},"sourceType":"module"}