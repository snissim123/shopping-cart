{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { forwardRefAs, Generic } from \"../../base\";\nimport { DEFAULTS } from \"../../base/helpers/variables\";\nexport const COLUMN_GROUP_DEFAULTS = {\n  gapSizes: [0, 1, 2, 3, 4, 5, 6, 7, 8]\n};\nexport const ColumnGroup = forwardRefAs((_a, ref) => {\n  var className = _a.className,\n      breakpoint = _a.breakpoint,\n      centered = _a.centered,\n      desktop = _a.desktop,\n      fullhd = _a.fullhd,\n      gapless = _a.gapless,\n      gapSize = _a.gapSize,\n      mobile = _a.mobile,\n      multiline = _a.multiline,\n      tablet = _a.tablet,\n      widescreen = _a.widescreen,\n      touch = _a.touch,\n      vcentered = _a.vcentered,\n      rest = tslib_1.__rest(_a, [\"className\", \"breakpoint\", \"centered\", \"desktop\", \"fullhd\", \"gapless\", \"gapSize\", \"mobile\", \"multiline\", \"tablet\", \"widescreen\", \"touch\", \"vcentered\"]);\n\n  const breakpoints = {\n    desktop,\n    fullhd,\n    mobile,\n    tablet,\n    touch,\n    widescreen\n  };\n  const gapSizeClassNames = classNames({\n    [\"is-\".concat(gapSize)]: typeof gapSize === \"number\"\n  }, Object.keys(breakpoints).map(key => {\n    const value = breakpoints[key];\n    return value === undefined ? {} : {\n      [\"is-\".concat(value.gapSize, \"-\").concat(key)]: value.gapSize !== undefined\n    };\n  }).reduce((acc, cv) => Object.assign({}, acc, cv), {}));\n  return React.createElement(Generic, Object.assign({\n    className: classNames(\"columns\", {\n      [\"is-\".concat(breakpoint)]: breakpoint,\n      \"is-centered\": centered,\n      \"is-gapless\": gapless,\n      \"is-multiline\": multiline,\n      \"is-variable \": gapSizeClassNames !== \"\",\n      \"is-vcentered\": vcentered\n    }, gapSizeClassNames, className),\n    ref: ref\n  }, rest));\n}, {\n  as: \"div\"\n});\nColumnGroup.displayName = \"Column.Group\";\nconst ColumnGroupBreakpointPropTypes = {\n  gapSize: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nColumnGroup.propTypes = Object.assign({}, DEFAULTS.breakpoints.map(breakpoint => ({\n  [breakpoint]: PropTypes.shape(ColumnGroupBreakpointPropTypes)\n})).reduce((acc, cv) => Object.assign({}, acc, cv), {}), ColumnGroupBreakpointPropTypes, {\n  breakpoint: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  centered: PropTypes.bool,\n  gapless: PropTypes.bool,\n  multiline: PropTypes.bool,\n  vcentered: PropTypes.bool\n});","map":null,"metadata":{},"sourceType":"module"}