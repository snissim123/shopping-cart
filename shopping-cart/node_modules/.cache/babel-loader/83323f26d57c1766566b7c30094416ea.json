{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport React from \"react\";\nimport { Generic } from \"../../base\";\nimport { combineRefs } from \"../../utils\";\nimport { DropdownContext } from \"./dropdown-context\";\nexport const DROPDOWN_DEFAULTS = {\n  alignments: [\"right\"]\n};\nconst initialState = {\n  active: false\n};\nexport class DropdownContainer extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.ref = React.createRef();\n\n    this.handleClick = event => {\n      if (this.props.managed !== true && this.active && this.ref.current !== null) {\n        if (event.target instanceof Element && !this.ref.current.contains(event.target)) {\n          this.active = false;\n        }\n      }\n    };\n\n    this.state = {\n      active: props.active === true\n    };\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"click\", this.handleClick);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"click\", this.handleClick);\n  }\n\n  render() {\n    const _a = this.props,\n          active = _a.active,\n          align = _a.align,\n          className = _a.className,\n          hoverable = _a.hoverable,\n          innerRef = _a.innerRef,\n          managed = _a.managed,\n          up = _a.up,\n          rest = tslib_1.__rest(_a, [\"active\", \"align\", \"className\", \"hoverable\", \"innerRef\", \"managed\", \"up\"]);\n\n    return React.createElement(DropdownContext.Provider, {\n      value: {\n        active: this.active,\n        setActive: value => this.active = value\n      }\n    }, React.createElement(Generic, Object.assign({\n      className: classNames(\"dropdown\", {\n        [\"is-\".concat(align)]: align,\n        \"is-active\": this.active,\n        \"is-hoverable\": hoverable,\n        \"is-up\": up\n      }, className),\n      ref: combineRefs(this.ref, innerRef)\n    }, rest)));\n  }\n\n  get active() {\n    return this.props.managed === true ? this.props.active === true : this.state.active;\n  }\n\n  set active(value) {\n    if (this.props.managed !== true) {\n      this.setState({\n        active: value\n      });\n    }\n  }\n\n}\nDropdownContainer.displayName = \"Dropdown.Container\";","map":null,"metadata":{},"sourceType":"module"}