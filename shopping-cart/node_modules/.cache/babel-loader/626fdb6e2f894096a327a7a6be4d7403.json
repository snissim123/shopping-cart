{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { forwardRefAs, Generic } from \"../../base\";\nexport const IMAGE_CONTAINER_DEFAULTS = {\n  dimmensions: [16, 24, 32, 48, 64, 96, 128],\n  ratios: [\"16by9\", \"1by1\", \"1by2\", \"1by3\", \"2by1\", \"2by3\", \"3by1\", \"3by2\", \"3by4\", \"3by5\", \"4by3\", \"4by5\", \"5by3\", \"5by4\", \"9by16\", \"square\"]\n};\n\nconst mapImageContainerChildren = (children, size) => {\n  if (typeof size !== \"string\") {\n    return children;\n  }\n\n  return React.Children.map(children, (child, i) => {\n    if (typeof child === \"object\" && child !== null && \"type\" in child) {\n      if (child.type !== React.Fragment) {\n        return React.cloneElement(child, {\n          className: classNames(\"has-ratio\", child.props.className)\n        });\n      } else {\n        const fragmentMapped = mapImageContainerChildren(child.props.children, size);\n        return React.createElement(React.Fragment, {\n          children: fragmentMapped\n        });\n      }\n    }\n\n    return child;\n  });\n};\n\nexport const ImageContainer = forwardRefAs((_a, ref) => {\n  var children = _a.children,\n      className = _a.className,\n      size = _a.size,\n      rest = tslib_1.__rest(_a, [\"children\", \"className\", \"size\"]);\n\n  let s;\n\n  if (typeof size === \"string\") {\n    s = size;\n  } else if (typeof size === \"number\") {\n    s = \"\".concat(size, \"x\").concat(size);\n  }\n\n  return React.createElement(Generic, Object.assign({\n    children: mapImageContainerChildren(children, size),\n    className: classNames(\"image\", {\n      [\"is-\".concat(s)]: s\n    }, className),\n    ref: ref\n  }, rest));\n}, {\n  as: \"figure\"\n});\nImageContainer.displayName = \"Image.Container\";\nImageContainer.propTypes = {\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};","map":null,"metadata":{},"sourceType":"module"}