{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { forwardRefAs, Generic } from \"../../base\";\nimport { DEFAULTS } from \"../../base/helpers/variables\";\nimport { ColumnGroup } from \"./column-group\";\nexport const COLUMN_DEFAULTS = {\n  sizes: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, \"one-third\", \"two-thirds\", \"one-quarter\", \"half\", \"three-quarters\", \"one-fifth\", \"two-fifths\", \"three-fifths\", \"four-fifths\", \"full\"]\n};\nexport const Column = Object.assign(forwardRefAs((_a, ref) => {\n  var className = _a.className,\n      mobile = _a.mobile,\n      tablet = _a.tablet,\n      desktop = _a.desktop,\n      widescreen = _a.widescreen,\n      fullhd = _a.fullhd,\n      touch = _a.touch,\n      narrow = _a.narrow,\n      offset = _a.offset,\n      size = _a.size,\n      rest = tslib_1.__rest(_a, [\"className\", \"mobile\", \"tablet\", \"desktop\", \"widescreen\", \"fullhd\", \"touch\", \"narrow\", \"offset\", \"size\"]);\n\n  const breakpoints = {\n    desktop,\n    fullhd,\n    mobile,\n    tablet,\n    touch,\n    widescreen\n  };\n  return React.createElement(Generic, Object.assign({\n    className: classNames(\"column\", {\n      [\"is-\".concat(size)]: size !== undefined,\n      [\"is-offset-\".concat(offset)]: offset !== undefined,\n      \"is-narrow\": narrow\n    }, Object.keys(breakpoints).map(breakpoint => {\n      const value = breakpoints[breakpoint];\n      return value === undefined ? {} : {\n        [\"is-\".concat(value.size, \"-\").concat(breakpoint)]: value.size !== undefined,\n        [\"is-narrow-\".concat(breakpoint)]: value.narrow,\n        [\"is-offset-\".concat(value.offset, \"-\").concat(breakpoint)]: value.offset !== undefined\n      };\n    }).reduce((acc, cv) => Object.assign({}, acc, cv), {}), className),\n    ref: ref\n  }, rest));\n}, {\n  as: \"div\"\n}), {\n  Group: ColumnGroup\n});\nColumn.displayName = \"Column\";\nconst ColumnSizeModifierPropTypes = {\n  narrow: PropTypes.bool,\n  offset: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nColumn.propTypes = Object.assign({}, DEFAULTS.breakpoints.map(breakpoint => ({\n  [breakpoint]: PropTypes.shape(ColumnSizeModifierPropTypes)\n})).reduce((acc, cv) => Object.assign({}, acc, cv), {}), ColumnSizeModifierPropTypes);","map":null,"metadata":{},"sourceType":"module"}