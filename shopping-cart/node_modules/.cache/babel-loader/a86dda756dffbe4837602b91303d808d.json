{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport { makePropTypesFactory, makeValidatingTransformFactory } from \"./factory\";\nexport const makeResponsiveBreakpointPropTypes = makePropTypesFactory(vars => ({\n  display: PropTypes.shape({\n    only: PropTypes.bool,\n    value: PropTypes.oneOf(vars.displays).isRequired\n  }),\n  hide: PropTypes.shape({\n    only: PropTypes.bool,\n    value: PropTypes.bool.isRequired\n  }),\n  textAlign: PropTypes.shape({\n    only: PropTypes.bool,\n    value: PropTypes.oneOf(vars.textAlignments).isRequired\n  }),\n  textSize: PropTypes.shape({\n    only: PropTypes.bool,\n    value: PropTypes.oneOf(vars.textSizes).isRequired\n  })\n}));\nexport const makeResponsiveBreakpointLimitedPropTypes = makePropTypesFactory(vars => ({\n  display: PropTypes.shape({\n    value: PropTypes.oneOf(vars.displays).isRequired\n  }),\n  hide: PropTypes.shape({\n    value: PropTypes.bool.isRequired\n  }),\n  textAlign: PropTypes.shape({\n    value: PropTypes.oneOf(vars.textAlignments).isRequired\n  }),\n  textSize: PropTypes.shape({\n    value: PropTypes.oneOf(vars.textSizes).isRequired\n  })\n}));\nexport const makePropTypes = makePropTypesFactory(vars => ({\n  responsive: PropTypes.shape(vars.breakpoints.map(breakpoint => ({\n    [breakpoint]: PropTypes.shape(vars.breakpointsLimited.indexOf(breakpoint) === -1 ? makeResponsiveBreakpointPropTypes(vars) : makeResponsiveBreakpointLimitedPropTypes(vars))\n  })).reduce((acc, cv) => Object.assign({}, acc, cv), {}))\n}));\nexport const transform = props => {\n  const className = props.className,\n        responsive = props.responsive,\n        rest = tslib_1.__rest(props, [\"className\", \"responsive\"]);\n\n  return Object.assign({\n    className: classNames(responsive !== undefined ? Object.keys(responsive).filter(breakpoint => responsive[breakpoint] !== undefined).map(breakpoint => {\n      const names = {};\n      const _responsive$breakpoin = responsive[breakpoint],\n            display = _responsive$breakpoin.display,\n            hide = _responsive$breakpoin.hide,\n            textAlign = _responsive$breakpoin.textAlign,\n            textSize = _responsive$breakpoin.textSize;\n\n      if (display !== undefined) {\n        const value = display.value;\n        const only = \"only\" in display ? display.only === true : false;\n        names[\"is-\".concat(value, \"-\").concat(breakpoint).concat(only ? \"-only\" : \"\")] = value;\n      }\n\n      if (hide !== undefined) {\n        const value = hide.value;\n        const only = \"only\" in hide ? hide.only === true : false;\n        names[\"is-hidden-\".concat(breakpoint).concat(only ? \"-only\" : \"\")] = value;\n      }\n\n      if (textAlign !== undefined) {\n        const value = textAlign.value;\n        const only = \"only\" in textAlign ? textAlign.only === true : false;\n        names[\"has-text-\".concat(value, \"-\").concat(breakpoint).concat(only ? \"-only\" : \"\")] = value;\n      }\n\n      if (textSize !== undefined) {\n        const value = textSize.value;\n        const only = \"only\" in textSize ? textSize.only === true : false;\n        names[\"is-size-\".concat(value, \"-\").concat(breakpoint).concat(only ? \"-only\" : \"\")] = value;\n      }\n\n      return names;\n    }).reduce((acc, cv) => Object.assign({}, acc, cv), {}) : undefined, className)\n  }, rest);\n};\nexport const makeValidatingTransform = makeValidatingTransformFactory(makePropTypes, transform);","map":null,"metadata":{},"sourceType":"module"}