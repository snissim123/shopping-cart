{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport PropTypes from \"prop-types\";\nimport { makePropTypesFactory, makeValidatingTransformFactory } from \"./factory\";\nexport const makePropTypes = makePropTypesFactory(vars => ({\n  tooltip: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  tooltipActive: PropTypes.bool,\n  tooltipColor: PropTypes.oneOf(vars.colors),\n  tooltipMultiline: PropTypes.bool,\n  tooltipPosition: PropTypes.oneOf(vars.tooltipPositions),\n  tooltipResponsive: PropTypes.objectOf(PropTypes.oneOf(vars.tooltipPositions))\n}));\nexport const transform = props => {\n  const className = props.className,\n        tooltip = props.tooltip,\n        tooltipActive = props.tooltipActive,\n        tooltipColor = props.tooltipColor,\n        tooltipMultiline = props.tooltipMultiline,\n        tooltipPosition = props.tooltipPosition,\n        _props$tooltipRespons = props.tooltipResponsive,\n        tooltipResponsive = _props$tooltipRespons === void 0 ? {} : _props$tooltipRespons,\n        rest = tslib_1.__rest(props, [\"className\", \"tooltip\", \"tooltipActive\", \"tooltipColor\", \"tooltipMultiline\", \"tooltipPosition\", \"tooltipResponsive\"]);\n\n  return Object.assign({\n    className: classNames({\n      \"is-tooltip-active\": tooltipActive,\n      [\"is-tooltip-\".concat(tooltipColor)]: tooltipColor,\n      \"is-tooltip-multiline\": tooltipMultiline,\n      [\"is-tooltip-\".concat(tooltipPosition)]: tooltipPosition,\n      tooltip\n    }, ...Object.keys(tooltipResponsive).map(breakpoint => \"is-tooltip-\".concat(tooltipResponsive[breakpoint], \"-\").concat(breakpoint)), className)\n  }, tooltip !== undefined ? {\n    \"data-tooltip\": tooltip\n  } : {}, rest);\n};\nexport const makeValidatingTransform = makeValidatingTransformFactory(makePropTypes, transform);","map":null,"metadata":{},"sourceType":"module"}