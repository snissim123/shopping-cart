{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport React from \"react\";\nimport { forwardRefAs, Generic } from \"../../base\";\nimport { Delete } from \"../../elements\";\nimport { ModalContext } from \"./modal-context\";\n\nconst mapChildren = (children, close) => React.Children.map(children, (child, i) => {\n  if (typeof child === \"object\" && child !== null && \"type\" in child) {\n    if (child.type === Delete) {\n      const onClick = child.props.onClick;\n      return React.cloneElement(child, {\n        onClick: event => {\n          if (onClick !== undefined) {\n            onClick(event);\n          }\n\n          close();\n        }\n      });\n    } else if (child.type === React.Fragment) {\n      return React.createElement(React.Fragment, {\n        children: mapChildren(child.props.children, close)\n      });\n    }\n  }\n\n  return child;\n});\n\nexport const ModalCardHead = forwardRefAs((_a, ref) => {\n  var className = _a.className,\n      children = _a.children,\n      rest = tslib_1.__rest(_a, [\"className\", \"children\"]);\n\n  return React.createElement(ModalContext.Consumer, null, ({\n    close\n  }) => React.createElement(Generic, Object.assign({\n    children: mapChildren(children, close),\n    className: classNames(\"modal-card-head\", className),\n    ref: ref\n  }, rest)));\n}, {\n  as: \"header\"\n});\nModalCardHead.displayName = \"Modal.Card.Head\";","map":null,"metadata":{},"sourceType":"module"}